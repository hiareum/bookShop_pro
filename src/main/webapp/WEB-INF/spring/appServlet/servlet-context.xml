<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	<annotation-driven />

	
	<resources mapping="/resources/**" location="/resources/" />

<!-- Tiles를 사용하여 View를 구성할 때 TilesConfigurer를 설정하는 코드-->
<!--TilesConfigurer클래스를 사용하기위해서 필수적으로  definitions와 preparerFactoryClass속성을 사용해야 한다-->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<!-- definitions라는 name을 가진 beans:property로 tiles설정파일의 위치를 나타냄
		classpath:tiles/*.xml으로 설정된다 tiles패키지 내의 모든 xml파일을 읽어와서 tiles를 구성 -->
		<beans:property name="definitions">
			<beans:list>
				<beans:value>classpath:tiles/*.xml</beans:value>
			</beans:list>
		</beans:property>
		<!-- preparerFactoryClass라는 이름을 가진  beans:property는 Spring의 Bean Factory를 Tiles에 적용하여
		 Tiles에서 Spring Bean을 사용할 수 있도록 해줍니다.-->
		<beans:property name="preparerFactoryClass"
			value="org.springframework.web.servlet.view.tiles2.SpringBeanPreparerFactory" />
	</beans:bean>
	
	<!--  UrlBasedViewResolver를 사용하여 TilesView를 View로 사용하는 ViewResolver를 정의하는 코드-->
	<!--  id="viewResolver은 이 bean을 식별하는데 사용 class는 이bean이 생성할 객체의 클래스를 나타냄 UrlBasedViewResolver를 사용함-->
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver"> 
	<!-- viewClass속성은 UrlBasedViewResolver가 생성하는 View 객체의 클래스를 나타냅니다. 여기서는 TilesView 클래스-->
	<!-- 즉 jsp가 아닌 tiles를 view로 사용하기위해서  viewClass를 TilesView로 설정한것임-->
	<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/> 
</beans:bean>
	
	<!-- com.bookshop 패키지를 스캔하고 해당 패키지에 속한 컴포넌트 클래스를 Bean으로 등록하는 것입니다.
	 스캔되는 클래스들은 @Controller, @Service, @Repository 등과 같은 어노테이션이 붙어 있어야 합니다. -->
	<context:component-scan base-package="com.bookshop" />

<!--<mvc:interceptors>작성시  에러가 뜬 이유 위에 xmlns:mvc="http://www.springframework.org/schema/mvc"설정을 안해줌 -->
<!-- Interceptor는 Spring MVC에서 Controller로 Request가 들어오기 전과 후에 처리를 수행할 수 있는 객체입니다. 
Controller에서 로그인 여부, 권한 체크, 광고 삽입 등 여러 작업을 수행할 때 Interceptor를 사용 -->
<!--  mvc:interceptors 태그는 모든 Request에 대해 동작하는 Interceptor를 설정할 때 사용-->
 <mvc:interceptors>
 <!-- 다. mvc:interceptor 태그 안에는 mvc:mapping 태그를 사용하여 Interceptor를 적용할 Request URL 패턴을 정의 -->
  <mvc:interceptor>
  <!--  //.do 와 ///*.do URL 패턴에 대해서만 ViewNameInterceptor를 실행하도록 설정 -->
    <mvc:mapping path="/*/*.do"/> 
    <mvc:mapping path="/*/*/*.do"/> 
      <beans:bean class="com.bookshop.common.interceptor.ViewNameInterceptor" />
  </mvc:interceptor>
 </mvc:interceptors>


		<!-- 멀티파트 리졸버 -->
    <beans:bean id="multipartResolver"  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <!--  파일 업로드 허용 용량을 byte 단위로 설정하는 속성-->
       <beans:property name="maxUploadSize" value="52428800" />
       <!-- 메모리 상에서 업로드를 처리할 때 허용되는 최대 크기를 byte 단위로 설정 -->
       <beans:property name="maxInMemorySize" value="52428800" />
       <!-- 업로드되는 파일의 인코딩 방식을 설정하는 속성 -->
       <beans:property name="defaultEncoding" value="utf-8" />
    </beans:bean>



</beans:beans>
